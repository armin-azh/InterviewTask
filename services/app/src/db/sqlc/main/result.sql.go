// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: result.sql

package sqlcmain

import (
	"context"
)

const createResult = `-- name: CreateResult :one
INSERT INTO "Result"(
                     session_id,
                     person_id,
                     thumbnail_path,
                     similarity
) VALUES ($1, $2, $3, $4) RETURNING id, session_id, person_id, thumbnail_path, similarity
`

func (q *Queries) CreateResult(ctx context.Context, sessionID int32, personID int32, thumbnailPath string, similarity float64) (Result, error) {
	row := q.db.QueryRowContext(ctx, createResult,
		sessionID,
		personID,
		thumbnailPath,
		similarity,
	)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.PersonID,
		&i.ThumbnailPath,
		&i.Similarity,
	)
	return i, err
}

const getResultListByPersonId = `-- name: GetResultListByPersonId :many
SELECT id, session_id, person_id, thumbnail_path, similarity FROM "Result" WHERE session_id=$1 ORDER BY id DESC LIMIT $2 OFFSET $3
`

func (q *Queries) GetResultListByPersonId(ctx context.Context, sessionID int32, limit int32, offset int32) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, getResultListByPersonId, sessionID, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.PersonID,
			&i.ThumbnailPath,
			&i.Similarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultListBySessionId = `-- name: GetResultListBySessionId :many
SELECT id, session_id, person_id, thumbnail_path, similarity FROM "Result" WHERE session_id=$1 ORDER BY id DESC LIMIT $2 OFFSET $3
`

func (q *Queries) GetResultListBySessionId(ctx context.Context, sessionID int32, limit int32, offset int32) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, getResultListBySessionId, sessionID, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.PersonID,
			&i.ThumbnailPath,
			&i.Similarity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
