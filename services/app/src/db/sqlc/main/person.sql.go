// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: person.sql

package sqlcmain

import (
	"context"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO "Person"(
    prime,
    first_name,
    last_name
)VALUES (
    $1, $2, $3
) RETURNING id, prime, first_name, last_name, created_at
`

func (q *Queries) CreatePerson(ctx context.Context, prime string, firstName string, lastName string) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson, prime, firstName, lastName)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Prime,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
	)
	return i, err
}

const getPersonList = `-- name: GetPersonList :many
SELECT id, prime, first_name, last_name, created_at FROM "Person"
ORDER BY id
LIMIT $1 OFFSET $2
`

func (q *Queries) GetPersonList(ctx context.Context, limit int32, offset int32) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersonList, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Prime,
			&i.FirstName,
			&i.LastName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
